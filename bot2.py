import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª—é—á–∏ API
TELEGRAM_TOKEN = "7567073966:AAFOGw8-Kr_xrQqmgWTAnkViWNsYVxWmvkQ"
DEEPSEEK_API_KEY = "sk-1aab11faf7be4650b7137960d8f629cd"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ASK_NAME, CHATTING = range(2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_reply_markup():
    return ReplyKeyboardMarkup(
        [
            ["–û —Å–µ–±–µ", "–ü–æ–º–æ—â—å"],
            ["–°–æ–≤–µ—Ç", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
            ["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–∞—è! –Ø –ú–∞—à–∞ - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        reply_markup=get_reply_markup()
    )
    return ASK_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_name = update.message.text
    context.user_data['name'] = user_name
    await update.message.reply_text(
        f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {user_name}! üíñ\n"
        "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=get_reply_markup()
    )
    return CHATTING

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if 'name' not in context.user_data:
        return await get_name(update, context)
    
    user_input = update.message.text
    name = context.user_data['name']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if user_input == "–û —Å–µ–±–µ":
        response = (
            "–Ø –ú–∞—à–∞ - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üíÅ‚Äç‚ôÄÔ∏è\n"
            "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
            "- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n"
            "- –ü–∏—Ç–∞–Ω–∏–µ–º –∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏\n"
            "- –§–∏—Ç–Ω–µ—Å-—Å–æ–≤–µ—Ç–∞–º–∏\n"
            "–°–ø—Ä–∞—à–∏–≤–∞–π –æ —á–µ–º —É–≥–æ–¥–Ω–æ!"
        )
    elif user_input == "–ü–æ–º–æ—â—å":
        response = "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    elif user_input == "–°–æ–≤–µ—Ç":
        response = "–°–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –≤—ã–¥–µ–ª–∏ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–±—è! –î–∞–∂–µ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. üå∏"
    elif user_input == "–ú–æ—Ç–∏–≤–∞—Ü–∏—è":
        response = "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å! –ü–æ–º–Ω–∏ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å. üí™"
    elif user_input == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        return await cancel(update, context)
    else:
        # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã - –∂–µ–Ω—Å–∫–∏–π –±–æ—Ç –ú–∞—à–∞. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ —Ç—Ä–µ–Ω–µ—Ä. "
                    "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ò–∑–±–µ–≥–∞–π –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–µ–º. "
                    "–û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)."
                },
                {
                    "role": "user",
                    "content": user_input
                }
            ],
            "temperature": 0.7
        }
        
        try:
            api_response = requests.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=15
            )
            api_response.raise_for_status()
            response = api_response.json()["choices"][0]["message"]["content"]
        except Exception as e:
            logger.error(f"API Error: {e}")
            response = "–û–π, —á—Ç–æ-—Ç–æ —è —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? üí´"

    await update.message.reply_text(response, reply_markup=get_reply_markup())
    return CHATTING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    name = context.user_data.get('name', '–¥–æ—Ä–æ–≥–∞—è')
    await update.message.reply_text(
        f"–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á, {name}! –ù–∞–ø–∏—à–∏ /start –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CHATTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.ALL, handle_message))
    
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()