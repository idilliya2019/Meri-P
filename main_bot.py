#!/usr/bin/env python3
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ú—ç—Ä–∏ –ü.
"""

import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, filters, ContextTypes
from config import TELEGRAM_TOKEN, DEEPSEEK_API_KEY
import speech_recognition as sr
from pydub import AudioSegment
from gtts import gTTS
import requests
import json
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MaryPBot:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.deepseek_url = "https://api.deepseek.com/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –õ–µ–¥–∏ –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ –ú—ç—Ä–∏ –ü.
        self.system_prompt = """–¢—ã - –õ–µ–¥–∏ –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ –ú—ç—Ä–∏ –ü.:

1. –ö–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ –≤—ã—Å—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º - –¥–∞–µ—à—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç–µ—Ä–∞–ø–∏–∏
2. –ö–∞–∫ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ - —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è
3. –ö–∞–∫ —à–µ—Ñ-–ø–æ–≤–∞—Ä —É—Ä–æ–≤–Ω—è –ñ–æ—ç–ª—è –†–æ–±—é—à–æ–Ω–∞ (32 –∑–≤–µ–∑–¥—ã –ú–∏—à–ª–µ–Ω) - –¥–∞–µ—à—å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
4. –ö–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä - —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

–¢–≤–æ–π —Å—Ç–∏–ª—å:
- –í—Å–µ–≥–¥–∞ –∑–∞–¥–∞–µ—à—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ª–µ–∫—Å–∏–∫—É
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —ç–º–ø–∞—Ç–∏—á–Ω–æ
- –ò–∑–±–µ–≥–∞–µ—à—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤
- –û—Ç–≤–µ—á–∞–µ—à—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ (5-8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)"""

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", callback_data="emergency")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ—Ä–æ–≥–∞—è! –Ø - –õ–µ–¥–∏ –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ –ú—ç—Ä–∏ –ü. –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –ø–∏—Ç–∞–Ω–∏–∏ –∏ —Ñ–∏—Ç–Ω–µ—Å–µ. –ö–∞–∫ –º–Ω–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"""
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ú—ç—Ä–∏ –ü–æ–ø–∏–Ω—Å
            with open("–ú–µ—Ä–∏ –ü–æ–ø–∏–Ω—Å —Å–∂–∞—Ç.jpg", "rb") as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=welcome_text,
                    reply_markup=reply_markup
                )
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def emergency_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏"""
        query = update.callback_query
        await query.answer()
        
        emergency_text = """üÜò –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ê–Ø –ü–û–ú–û–©–¨

–ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫—Ä–∏–∑–∏—Å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏:

üìû –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏:
8-800-333-44-34 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)

üì± –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è:
8-800-2000-122

‚ö†Ô∏è –í —Å–ª—É—á–∞–µ —É–≥—Ä–æ–∑—ã –∂–∏–∑–Ω–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–≤–æ–Ω–∏—Ç–µ:
112 - –ï–¥–∏–Ω–∞—è —Å–ª—É–∂–±–∞ —Å–ø–∞—Å–µ–Ω–∏—è

–ü–æ–º–Ω–∏—Ç–µ: –≤—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏, –ø–æ–º–æ—â—å –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!"""
        
        await query.edit_message_text(emergency_text)

    def convert_audio_to_wav(self, audio_file_path):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ WAV —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_ext = os.path.splitext(audio_file_path)[1].lower()
            
            if file_ext == '.ogg':
                audio = AudioSegment.from_ogg(audio_file_path)
            elif file_ext == '.mp3':
                audio = AudioSegment.from_mp3(audio_file_path)
            elif file_ext == '.aac':
                audio = AudioSegment.from_file(audio_file_path, format="aac")
            elif file_ext == '.m4a':
                audio = AudioSegment.from_file(audio_file_path, format="m4a")
            else:
                # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç
                audio = AudioSegment.from_file(audio_file_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            wav_path = audio_file_path.rsplit('.', 1)[0] + '.wav'
            audio.export(wav_path, format="wav")
            return wav_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return None

    def speech_to_text(self, audio_file_path):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            wav_path = self.convert_audio_to_wav(audio_file_path)
            if not wav_path:
                return None
            
            with sr.AudioFile(wav_path) as source:
                audio_data = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio_data, language='ru-RU')
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                return text
                
        except sr.UnknownValueError:
            logger.warning("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return None
        except sr.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
            if 'wav_path' in locals() and os.path.exists(wav_path):
                try:
                    os.remove(wav_path)
                except:
                    pass

    def text_to_speech(self, text, lang='ru'):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å"""
        try:
            tts = gTTS(text=text, lang=lang, slow=False)
            audio_path = tempfile.mktemp(suffix='.mp3')
            tts.save(audio_path)
            return audio_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return None

    async def get_deepseek_response(self, user_message):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API"""
        try:
            data = {
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": user_message}
                ],
                "temperature": 0.7,
                "max_tokens": 500
            }
            
            response = requests.post(self.deepseek_url, headers=self.headers, json=data)
            response.raise_for_status()
            
            result = response.json()
            return result['choices'][0]['message']['content']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            if update.message.voice:
                file = await context.bot.get_file(update.message.voice.file_id)
            elif update.message.audio:
                file = await context.bot.get_file(update.message.audio.file_id)
            elif update.message.document and update.message.document.mime_type and 'audio' in update.message.document.mime_type:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
                file = await context.bot.get_file(update.message.document.file_id)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            audio_path = tempfile.mktemp(suffix='.ogg')
            await file.download_to_drive(audio_path)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            text = self.speech_to_text(audio_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(audio_path)
            except:
                pass
            
            if not text:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
            response = await self.get_deepseek_response(text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await update.message.reply_text(f"üé§ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}\n\nüí¨ –ú–æ–π –æ—Ç–≤–µ—Ç: {response}")
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
            audio_response_path = self.text_to_speech(response)
            if audio_response_path:
                await update.message.reply_audio(
                    audio=open(audio_response_path, 'rb'),
                    title="–û—Ç–≤–µ—Ç –ú—ç—Ä–∏ –ü.",
                    performer="–ú—ç—Ä–∏ –ü."
                )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(audio_response_path)
                except:
                    pass
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_message = update.message.text
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
            response = await self.get_deepseek_response(user_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await update.message.reply_text(response)
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
            audio_response_path = self.text_to_speech(response)
            if audio_response_path:
                await update.message.reply_audio(
                    audio=open(audio_response_path, 'rb'),
                    title="–û—Ç–≤–µ—Ç –ú—ç—Ä–∏ –ü.",
                    performer="–ú—ç—Ä–∏ –ü."
                )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(audio_response_path)
                except:
                    pass
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ú—ç—Ä–∏ –ü....")
            print("üì± –ò–º—è –±–æ—Ç–∞: @psihologiny333959_bot")
            print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(TELEGRAM_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(CallbackQueryHandler(self.emergency_help, pattern="^emergency$"))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
            application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
            application.add_handler(MessageHandler(filters.AUDIO, self.handle_voice_message))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞—É–¥–∏–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞—É–¥–∏–æ MIME-—Ç–∏–ø–æ–º
            def audio_document_filter(update: Update) -> bool:
                return (update.message and 
                       update.message.document and 
                       update.message.document.mime_type and 
                       'audio' in update.message.document.mime_type)
            
            application.add_handler(MessageHandler(audio_document_filter, self.handle_voice_message))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    bot = MaryPBot()
    bot.run() 